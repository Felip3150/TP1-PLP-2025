* ∀ k :: Int positivo. indentar k Vacio = Vacio

indentar k Vacio = (indentar)
foldDoc (Vacio) (\s acc -> Texto s acc) (\i2 acc -> Linea (i+i2) acc) = (foldDoc)
Vacio


* ∀ k :: Int positivo. indentar k (Texto s d) = Texto s (indentar k d)

indentar k (Texto s d) = (indentar)
foldDoc (Vacio) (\s' acc -> Texto s' acc) (\i2 acc -> Linea (k+i2) acc) (Texto s d) = (foldDoc)
(\s' acc -> Texto s' acc) s (foldDoc (Vacio) (\s' acc -> Texto s' acc) (\i2 acc -> Linea (k+i2) acc)) d = (sintaxis)
(\s' -> (\acc -> Texto s' acc)) s (foldDoc (Vacio) (\s' acc -> Texto s' acc) (\i2 acc -> Linea (k+i2) acc)) d = (beta)

	// (foldDoc (Vacio) (\s' acc -> Texto s' acc) (\i2 acc -> Linea (k+i2) acc)) d == indentar k d

(\acc -> Texto s acc) (indentar k d) = (beta)
Texto s (indentar k d)


* ∀ m, k :: Int positivos. ∀ d :: Doc. indentar m (Linea k d) = Linea (m+k) (indentar m d)

indentar m (Linea k d) = (indentar)
foldDoc (Vacio) (\s acc -> Texto s acc) (\i2 acc -> Linea (m+i2) acc) (Linea k d) = (foldDoc)
(\i2 acc -> Linea (m+i2) acc) k (foldDoc (Vacio) (\s acc -> Texto s acc) (\i2 acc -> Linea (m+i2) acc)) d = (sintaxis)
(\i2 -> (\acc -> Linea (m+i2) acc)) k (foldDoc (Vacio) (\s acc -> Texto s acc) (\i2 acc -> Linea (m+i2) acc)) d = (beta)

	// (foldDoc (Vacio) (\s acc -> Texto s acc) (\i2 acc -> Linea (m+i2) acc)) d == indentar m d

(\acc -> Linea (m+k) acc) (indentar m d) = (beta)
Linea (m+k) (indentar m d)